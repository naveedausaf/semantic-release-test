name: Release to Production
concurrency: release-to-prod-pipeline
on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    name: Create Release
    outputs:
      released: ${{ env.RELEASED }}
      newVersion: ${{ env.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout code
        id: checkout
        with:
          submodules: true
          fetch-depth: 0
          # without fetch-deptch:0
          # commitlint doesn't work on
          # a range of commits and throw error
          # even semantic-reelase GItHub Actions
          # CI workflow example:
          # https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions
          #
          # ..uses fetch-depth: 0 and it's hard to
          # see how semantic-release could operate
          # without this.
      - name: Install dependencies
        # If we don't do this, commitlint throws errors about
        # not finding rules package for commit message conventions
        run: npm ci
      - name: Run commitlint on head commit's message

        # Using env below rather than accessing them
        # directly due to GitHub Docs recommendation
        # that this is better for security as it
        # mitigates script injection attacks :
        # https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        env:
          headcommitmsg: ${{ github.event.head_commit.message }}
        run: echo "$headcommitmsg" | npx commitlint
      - name: Create GitHub release
        id: semanticrelease
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "RELEASED=0" >> $GITHUB_ENV
          npm audit signatures
          npm run release

      # Instead of a separate job, you can have steps to
      # deploy in the same job.
      # However, each would need to be made conditional on
      # env.RELEASED variable (set during npm run release)
      # being 1. For example:
      #
      # - name: Deploy Step 1
      #   id: deploystep1
      #   if: ${{ env.RELEASED == 1 }}

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-24.04
    environment:
      name: Production
      url: ${{ steps.deploy-artifacts.outputs.previewUrl }}
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    needs: create-release
    if: ${{ needs.create-release.outputs.released == 1}}
    steps:
      - name: Print version to console
        run: |
          echo "New Version Number is: ${{ needs.create-release.outputs.newVersion }}"
      - uses: actions/checkout@v2
      - name: Update Version Number in package.json
        run: npm --no-git-tag-version version ${{ needs.create-release.outputs.newVersion }}
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        id: deploy-artifacts
        run: |
          previewUrl=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "previewUrl=$previewUrl" >> "$GITHUB_OUTPUT"
